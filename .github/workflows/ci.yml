name: 🚀 ManageBac Assignment Checker CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  PYTHON_VERSION: "3.8"
  PYTHON_VERSIONS: "3.8, 3.9, 3.10, 3.11, 3.12"

jobs:
  # ========================================
  # 🧪 Testing Job | 测试任务
  # ========================================
  test:
    name: 🧪 Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
        exclude:
          - os: windows-latest
            python-version: "3.8"
          - os: macos-latest
            python-version: "3.8"

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: 📦 Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: 📥 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt

    - name: 🎭 Install Playwright browsers
      run: |
        playwright install chromium
        playwright install-deps

    - name: 🧪 Run tests
      run: |
        pytest tests/ -v --cov=managebac_checker --cov-report=xml --cov-report=html

    - name: 📊 Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  # ========================================
  # 🔍 Code Quality Job | 代码质量任务
  # ========================================
  code-quality:
    name: 🔍 Code Quality
    runs-on: ubuntu-latest
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt

    - name: 🎨 Code formatting check
      run: black --check managebac_checker/ tests/

    - name: 📏 Import sorting check
      run: isort --check-only managebac_checker/ tests/

    - name: 🔍 Linting
      run: flake8 managebac_checker/ tests/

    - name: 🏷️ Type checking
      run: mypy managebac_checker/

    - name: 🔒 Security check
      run: |
        bandit -r managebac_checker/ -f json -o bandit-report.json
        safety check --json --output safety-report.json

    - name: 📊 Code complexity
      run: |
        radon cc managebac_checker/ -a
        xenon managebac_checker/ --max-absolute B --max-modules A --max-average A

    - name: 🗑️ Dead code detection
      run: vulture managebac_checker/ --min-confidence 80

  # ========================================
  # 🏗️ Build Job | 构建任务
  # ========================================
  build:
    name: 🏗️ Build Package
    runs-on: ubuntu-latest
    needs: [test, code-quality]
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: 📦 Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine check-manifest

    - name: 🔍 Check manifest
      run: check-manifest

    - name: 🏗️ Build package
      run: python -m build

    - name: 📦 Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist
        path: dist/

  # ========================================
  # 🚀 Release Job | 发布任务
  # ========================================
  release:
    name: 🚀 Release
    runs-on: ubuntu-latest
    needs: [test, code-quality, build]
    if: github.event_name == 'release'
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install twine

    - name: 📥 Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: dist
        path: dist/

    - name: 🚀 Publish to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        twine upload dist/*

  # ========================================
  # 📊 Performance Job | 性能任务
  # ========================================
  performance:
    name: 📊 Performance Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt

    - name: 🎭 Install Playwright browsers
      run: |
        playwright install chromium
        playwright install-deps

    - name: 📊 Run performance tests
      run: |
        pytest tests/ -v --benchmark-only --benchmark-save=performance

    - name: 📈 Upload performance results
      uses: actions/upload-artifact@v3
      with:
        name: performance-results
        path: .benchmarks/