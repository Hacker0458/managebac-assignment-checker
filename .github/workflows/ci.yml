name: 🚀 ManageBac Assignment Checker CI/CD

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 0 * * 0'  # Weekly security scan

env:
  PYTHON_DEFAULT_VERSION: '3.11'

jobs:
  # 🧪 Testing Job
  test:
    name: 🧪 Test Python ${{ matrix.python-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
        os: [ubuntu-latest, windows-latest, macos-latest]
        exclude:
          # Reduce matrix size for faster CI - only test older Python on Ubuntu
          - os: windows-latest
            python-version: '3.8'
          - os: macos-latest
            python-version: '3.8'
          - os: windows-latest
            python-version: '3.9'
          - os: macos-latest
            python-version: '3.9'

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 🐍 Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
        cache-dependency-path: |
          requirements.txt
          requirements-test.txt

    - name: ⬆️ Upgrade pip
      run: python -m pip install --upgrade pip wheel setuptools

    - name: 📦 Install dependencies
      run: |
        pip install -r requirements-test.txt
        pip install -e . --no-deps

    - name: 🎭 Install Playwright browsers
      run: playwright install chromium --with-deps

    - name: 🔍 Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 managebac_checker tests --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 managebac_checker tests --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: 🎨 Check code formatting with black
      run: black --check --diff managebac_checker tests

    - name: 🔧 Type check with mypy
      run: mypy managebac_checker --ignore-missing-imports --no-strict-optional
      continue-on-error: true  # Allow type checking to fail without breaking CI

    - name: 🧪 Test with pytest
      env:
        # Set test environment variables
        MANAGEBAC_EMAIL: test@example.com
        MANAGEBAC_PASSWORD: testpassword
        MANAGEBAC_URL: https://test.managebac.com
        HEADLESS: true
        DEBUG: false
      run: |
        # Create test config file
        echo "MANAGEBAC_EMAIL=test@example.com" > .env.test
        echo "MANAGEBAC_PASSWORD=testpassword" >> .env.test
        echo "MANAGEBAC_URL=https://test.managebac.com" >> .env.test
        echo "HEADLESS=true" >> .env.test
        echo "DEBUG=false" >> .env.test
        
        # Run tests with proper configuration
        pytest tests/ -v --tb=short --disable-warnings

    - name: 📦 Test package installation
      run: |
        pip install -e .
        python -c "import managebac_checker; print('✅ Package installed successfully')"

    # Coverage upload disabled for now
    # - name: ☂️ Upload coverage to Codecov
    #   if: matrix.python-version == env.PYTHON_DEFAULT_VERSION && matrix.os == 'ubuntu-latest'
    #   uses: codecov/codecov-action@v3
    #   with:
    #     file: ./coverage.xml
    #     flags: unittests
    #     name: codecov-umbrella

  # 🔒 Security Scan Job
  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    permissions:
      security-events: write
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_DEFAULT_VERSION }}
        cache: 'pip'

    - name: 🔒 Install security tools
      run: |
        pip install -r requirements-test.txt

    - name: 🛡️ Run bandit security scan
      run: |
        bandit -r managebac_checker/ -f json -o bandit-report.json || echo "Bandit scan completed with issues"
        bandit -r managebac_checker/ -f txt || echo "Bandit scan completed with issues"
      continue-on-error: true

    - name: 🔍 Run safety check
      run: safety check --json --output safety-report.json || echo "Safety check completed with issues"
      continue-on-error: true

    - name: 🔎 Run pip-audit
      run: pip-audit --desc --format=json --output=pip-audit-report.json || echo "Pip-audit completed with issues"
      continue-on-error: true

    - name: 📤 Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
          pip-audit-report.json

  # 🏗️ Build Job
  build:
    name: 🏗️ Build Package
    needs: [test, security]
    runs-on: ubuntu-latest
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 🐍 Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_DEFAULT_VERSION }}
        cache: 'pip'

    - name: 🔨 Install build dependencies
      run: |
        pip install build twine check-manifest

    - name: ✅ Check manifest
      run: check-manifest

    - name: 🏗️ Build package
      run: python -m build

    - name: 🔍 Check package
      run: twine check dist/*

    - name: 📤 Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: python-package-distributions
        path: dist/

  # 🚀 Release Job (only on tags)
  release:
    name: 🚀 Create Release
    needs: [build]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 📤 Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: python-package-distributions
        path: dist/

    - name: 🏷️ Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: dist/*
        generate_release_notes: true
        draft: false
        prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}

  # 📊 Code Quality Job
  code-quality:
    name: 📊 Code Quality Analysis
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 🐍 Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_DEFAULT_VERSION }}
        cache: 'pip'

    - name: 📦 Install dependencies
      run: |
        pip install -r requirements-test.txt

    - name: 📈 Calculate code metrics
      run: |
        echo "## 📊 Code Metrics" >> $GITHUB_STEP_SUMMARY
        echo "### Cyclomatic Complexity" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        radon cc managebac_checker --show-complexity --total-average >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        echo "### Maintainability Index" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        radon mi managebac_checker --show >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        echo "### Raw Metrics" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        radon raw managebac_checker --summary >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
