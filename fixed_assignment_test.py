#!/usr/bin/env python3
"""
Fixed Assignment Detection Tester
‰øÆÂ§çÁöÑ‰Ωú‰∏öÊ£ÄÊµãÊµãËØïÂ∑•ÂÖ∑

Tests the assignment detection logic with correct API usage
‰ΩøÁî®Ê≠£Á°ÆÁöÑAPIÊµãËØï‰Ωú‰∏öÊ£ÄÊµãÈÄªËæë
"""

import os
import sys
import asyncio
import logging
from pathlib import Path


def setup_test_logging():
    """Setup logging for testing"""
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(levelname)s - %(message)s',
        handlers=[
            logging.StreamHandler(),
            logging.FileHandler('test_assignment.log')
        ]
    )
    return logging.getLogger(__name__)


def test_config_loading():
    """Test configuration loading with correct attribute names"""
    print("üîç Testing Configuration Loading...")
    print("="*50)

    try:
        from managebac_checker.config import Config

        # First try to load from environment
        try:
            config = Config.from_environment()
            print(f"‚úÖ Config loaded from environment")
        except ValueError as e:
            print(f"‚ö†Ô∏è Environment config failed: {e}")
            print("üìù Checking .env file...")

            # Check .env file
            env_file = Path('.env')
            if env_file.exists():
                with open(env_file, 'r') as f:
                    env_content = f.read()
                    print("üìÑ .env file contents (redacted):")
                    for line in env_content.split('\n'):
                        if '=' in line and not line.strip().startswith('#'):
                            key, value = line.split('=', 1)
                            if 'PASSWORD' in key.upper():
                                print(f"   {key}=***")
                            elif 'EMAIL' in key.upper() and 'example.com' in value:
                                print(f"   {key}={value} ‚ö†Ô∏è (example credential)")
                            else:
                                print(f"   {key}={value}")

                # Try with manual values from .env
                os.environ.setdefault('MANAGEBAC_EMAIL', 'test@example.com')
                os.environ.setdefault('MANAGEBAC_PASSWORD', 'test')
                config = Config.from_environment()
                print(f"‚úÖ Config loaded with defaults")

        print(f"üìß Email: {config.email[:15] if config.email else 'Not set'}...")
        print(f"üåê URL: {config.url}")
        print(f"üóÇÔ∏è Output dir: {config.output_dir}")
        print(f"üìã Report formats: {config.report_formats}")
        print(f"üîí Headless mode: {config.headless}")

        # Check if using example credentials
        if config.email and 'example.com' in config.email:
            print("‚ö†Ô∏è WARNING: Still using example credentials!")
            print("üí° Please update .env file with real ManageBac credentials")
            return False, config
        elif not config.email:
            print("‚ö†Ô∏è WARNING: No email configured!")
            return False, config
        else:
            print("‚úÖ Real credentials appear to be configured")
            return True, config

    except Exception as e:
        print(f"‚ùå Config loading failed: {e}")
        import traceback
        traceback.print_exc()
        return False, None


def test_scraper_creation():
    """Test scraper creation with correct parameters"""
    print("\nüï∑Ô∏è Testing Scraper Creation...")
    print("="*50)

    try:
        from managebac_checker.config import Config
        from managebac_checker.scraper import ManageBacScraper

        # Setup logger
        logger = setup_test_logging()

        # Load config
        try:
            config = Config.from_environment()
        except ValueError:
            os.environ.setdefault('MANAGEBAC_EMAIL', 'test@example.com')
            os.environ.setdefault('MANAGEBAC_PASSWORD', 'test')
            config = Config.from_environment()

        # Create scraper with correct parameters
        scraper = ManageBacScraper(config, logger)

        print("‚úÖ ManageBacScraper created successfully")
        print(f"üåê Target URL: {config.url}")
        print(f"üîê Email configured: {bool(config.email)}")
        print(f"üóùÔ∏è Password configured: {bool(config.password)}")

        return True, scraper, config

    except Exception as e:
        print(f"‚ùå Scraper creation failed: {e}")
        import traceback
        traceback.print_exc()
        return False, None, None


async def test_assignment_fetching_manual():
    """Test assignment fetching with manual debugging"""
    print("\nüìö Testing Assignment Fetching (Manual Debug)...")
    print("="*50)

    try:
        from managebac_checker.config import Config
        from managebac_checker.scraper import ManageBacScraper
        from playwright.async_api import async_playwright

        # Setup
        logger = setup_test_logging()

        try:
            config = Config.from_environment()
        except ValueError:
            print("‚ö†Ô∏è Using test credentials - real test requires actual ManageBac account")
            return False

        if 'example.com' in config.email:
            print("‚ö†Ô∏è Cannot test with example credentials")
            return False

        print(f"üîê Testing with email: {config.email[:15]}...")

        # Create scraper
        scraper = ManageBacScraper(config, logger)

        # Use Playwright directly for better debugging
        async with async_playwright() as p:
            print("üöÄ Launching browser...")
            browser = await p.chromium.launch(headless=config.headless)
            context = await browser.new_context()
            page = await context.new_page()

            try:
                print("üîê Attempting login...")
                login_success = await scraper.login(page)

                if login_success:
                    print("‚úÖ Login successful!")

                    print("üîç Looking for assignments...")

                    # Try multiple approaches to find assignments
                    assignment_selectors = [
                        "div.assignment",
                        "div.assignment-card",
                        "div.task-item",
                        "li.assignment",
                        "li.assignment-item",
                        "tr.assignment",
                        ".task",
                        ".assignment",
                        "[data-assignment]",
                        ".homework",
                        ".homework-item"
                    ]

                    assignments_found = []

                    for selector in assignment_selectors:
                        elements = await page.query_selector_all(selector)
                        if elements:
                            print(f"‚úÖ Found {len(elements)} elements with selector: {selector}")
                            assignments_found.extend(elements)

                    if assignments_found:
                        print(f"üìä Total assignment elements found: {len(assignments_found)}")

                        # Try to extract details from first few
                        for i, element in enumerate(assignments_found[:3]):
                            text = await element.text_content()
                            print(f"   Assignment {i+1}: {text[:100]}...")

                    else:
                        print("‚ö†Ô∏è No assignment elements found with standard selectors")
                        print("üîç Let's check the page content...")

                        # Check page title and URL
                        title = await page.title()
                        url = page.url
                        print(f"üìÑ Page title: {title}")
                        print(f"üîó Current URL: {url}")

                        # Look for any content that might be assignments
                        page_content = await page.content()
                        assignment_keywords = ["‰Ωú‰∏ö", "assignment", "homework", "task", "due", "deadline"]

                        for keyword in assignment_keywords:
                            if keyword in page_content.lower():
                                print(f"‚úÖ Found keyword '{keyword}' in page content")
                            else:
                                print(f"‚ùå Keyword '{keyword}' not found in page content")

                        # Check if we're actually on the right page
                        if "managebac" not in url.lower():
                            print("‚ö†Ô∏è Warning: Not on a ManageBac page after login")

                        print("üîç Saving page content for manual inspection...")
                        with open('debug_page_content.html', 'w', encoding='utf-8') as f:
                            f.write(page_content)
                        print("üíæ Page content saved to debug_page_content.html")

                    return len(assignments_found) > 0

                else:
                    print("‚ùå Login failed")
                    return False

            finally:
                await browser.close()

    except Exception as e:
        print(f"‚ùå Assignment fetching test failed: {e}")
        import traceback
        traceback.print_exc()
        return False


def test_checker_class():
    """Test the main checker class"""
    print("\nüîç Testing Main Checker Class...")
    print("="*50)

    try:
        from managebac_checker.checker import ManageBacChecker
        from managebac_checker.config import Config

        # Setup config
        try:
            config = Config.from_environment()
        except ValueError:
            os.environ.setdefault('MANAGEBAC_EMAIL', 'test@example.com')
            os.environ.setdefault('MANAGEBAC_PASSWORD', 'test')
            config = Config.from_environment()

        # Create checker
        checker = ManageBacChecker(config)
        print("‚úÖ ManageBacChecker created successfully")

        return True, checker

    except Exception as e:
        print(f"‚ùå Checker class test failed: {e}")
        import traceback
        traceback.print_exc()
        return False, None


async def run_comprehensive_assignment_test():
    """Run all assignment-related tests"""
    print("üöÄ Fixed Assignment Detection Test")
    print("üöÄ ‰øÆÂ§çÁöÑ‰Ωú‰∏öÊ£ÄÊµãÊµãËØï")
    print("="*60)

    results = {}

    # Test configuration
    config_ok, config = test_config_loading()
    results['config'] = config_ok

    # Test scraper creation
    scraper_ok, scraper, _ = test_scraper_creation()
    results['scraper'] = scraper_ok

    # Test checker class
    checker_ok, checker = test_checker_class()
    results['checker'] = checker_ok

    # Test assignment fetching if configuration is OK
    if config_ok and scraper_ok and config and 'example.com' not in config.email:
        print("\nüéØ Real credentials found, testing assignment fetching...")
        results['assignments'] = await test_assignment_fetching_manual()
    else:
        print("‚ö†Ô∏è Skipping assignment fetching test")
        if not config_ok:
            print("   Reason: Configuration issues")
        elif config and 'example.com' in config.email:
            print("   Reason: Using example credentials")
        results['assignments'] = False

    # Generate report
    print("\n" + "="*60)
    print("üìä FIXED ASSIGNMENT DETECTION TEST REPORT")
    print("üìä ‰øÆÂ§çÁöÑ‰Ωú‰∏öÊ£ÄÊµãÊµãËØïÊä•Âëä")
    print("="*60)

    test_names = {
        'config': 'Configuration Loading ÈÖçÁΩÆÂä†ËΩΩ',
        'scraper': 'Scraper Creation Áà¨Ëô´ÂàõÂª∫',
        'checker': 'Checker Class Ê£ÄÊü•Âô®Á±ª',
        'assignments': 'Assignment Fetching ‰Ωú‰∏öËé∑Âèñ'
    }

    for test_name, passed in results.items():
        status = "‚úÖ PASS" if passed else "‚ùå FAIL"
        display_name = test_names.get(test_name, test_name)
        print(f"{status} {display_name}")

    failed_tests = [name for name, passed in results.items() if not passed]

    if not failed_tests:
        print("\nüéâ All tests passed!")
        print("üéâ ÊâÄÊúâÊµãËØïÈÄöËøáÔºÅ")
    else:
        print(f"\n‚ö†Ô∏è {len(failed_tests)} test(s) failed:")
        print(f"‚ö†Ô∏è {len(failed_tests)}‰∏™ÊµãËØïÂ§±Ë¥•Ôºö")

        if 'config' in failed_tests:
            print("   üîß Fix: Update .env with real ManageBac credentials")
            print("   üîß ‰øÆÂ§çÔºöÂú®.env‰∏≠Êõ¥Êñ∞ÁúüÂÆûÁöÑManageBacÂá≠ÊçÆ")

        if 'assignments' in failed_tests and 'config' not in failed_tests:
            print("   üîß Fix: Check debug_page_content.html for website structure")
            print("   üîß ‰øÆÂ§çÔºöÊ£ÄÊü•debug_page_content.html‰∫ÜËß£ÁΩëÁ´ôÁªìÊûÑ")

    print(f"\nüí° Recommendations Âª∫ËÆÆ:")
    print(f"1. Update .env file with real credentials ‰ΩøÁî®ÁúüÂÆûÂá≠ÊçÆÊõ¥Êñ∞.envÊñá‰ª∂")
    print(f"2. Check debug_page_content.html if fetching failed Â¶ÇÊûúËé∑ÂèñÂ§±Ë¥•ËØ∑Ê£ÄÊü•Ë∞ÉËØïÊñá‰ª∂")
    print(f"3. Verify ManageBac website hasn't changed structure È™åËØÅManageBacÁΩëÁ´ôÁªìÊûÑÊú™ÂèòÂåñ")

    return len(failed_tests) == 0


if __name__ == "__main__":
    success = asyncio.run(run_comprehensive_assignment_test())
    print(f"\nüèÅ Test completed: {'SUCCESS' if success else 'ISSUES FOUND'}")
    print(f"üèÅ ÊµãËØïÂÆåÊàêÔºö{'ÊàêÂäü' if success else 'ÂèëÁé∞ÈóÆÈ¢ò'}")
    sys.exit(0 if success else 1)